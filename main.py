# -*- coding: utf-8 -*-
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup,
    KeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
import uuid

# CONFIG
BOT_TOKEN = "7069586996:AAG5A-LLSWaQrLQ9EqM8_JihaQI3I90bFik"
SELLER_ID = 7241783674
IMAGE_URL = "https://i.ibb.co/GvdwqBgR/IMG-20250409-100556.jpg"

# States
FOOD, TAX, DISTANCE, CONFIRM, ADDRESS, SCREENSHOT = range(6)
user_lang = {}

# Language toggle
def get_text(lang, en, hi, hing):
    if lang == "hi": return hi
    elif lang == "hing": return hing
    else: return en

# Reply buttons
def main_keyboard(lang="en"):
    return ReplyKeyboardMarkup([
        [KeyboardButton("Order"), KeyboardButton("Contact")],
        [KeyboardButton("Language"), KeyboardButton("Menu")],
        [KeyboardButton("Help"), KeyboardButton("Cancel")]
    ], resize_keyboard=True)

# Start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_lang[update.effective_user.id] = "hi"
    await update.message.reply_text("‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! Order ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è 'Order' ‡§¶‡§¨‡§æ‡§è‡§Ç‡•§", reply_markup=main_keyboard("hi"))

# Language toggle
async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    current = user_lang.get(uid, "hi")
    new = "en" if current == "hi" else "hing" if current == "en" else "hi"
    user_lang[uid] = new
    msg = get_text(new, "Language set to English", "‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§ï‡•Ä ‡§ó‡§à", "Language ab Hinglish me hai")
    await update.message.reply_text(msg, reply_markup=main_keyboard(new))

# Menu
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "hi")
    msg = get_text(
        lang,
        "Steps:\n1. Enter food amount\n2. Enter tax + platform fee\n3. Enter distance (max 7 km)\n\nThen confirm.",
        "‡§∏‡•ç‡§ü‡•á‡§™‡•ç‡§∏:\n1. ‡§≠‡•ã‡§ú‡§® ‡§∞‡§æ‡§∂‡§ø ‡§°‡§æ‡§≤‡•á‡§Ç\n2. ‡§ü‡•à‡§ï‡•ç‡§∏ + ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§∂‡•Å‡§≤‡•ç‡§ï ‡§ú‡•ã‡§°‡§º‡•á‡§Ç\n3. ‡§¶‡•Ç‡§∞‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 7km)\n\n‡§´‡§ø‡§∞ ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç‡•§",
        "Steps:\n1. Food amount daalo\n2. Tax + fee jodo\n3. Distance daalo (max 7km)\n\nThen confirm karo."
    )
    await update.message.reply_text(msg)

# Contact
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Seller ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\nüëâ https://t.me/katiharvloger2")

# Cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Order process cancel ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§", reply_markup=main_keyboard())

# Order
async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = user_lang.get(uid, "hi")
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=IMAGE_URL)
    msg = get_text(
        lang,
        "1. Enter food amount\n2. Enter tax + GST + fee\n3. Distance (max 7km)",
        "1. ‡§≠‡•ã‡§ú‡§® ‡§∞‡§æ‡§∂‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç\n2. ‡§ü‡•à‡§ï‡•ç‡§∏ + ‡§ú‡•Ä‡§è‡§∏‡§ü‡•Ä + ‡§∂‡•Å‡§≤‡•ç‡§ï\n3. ‡§¶‡•Ç‡§∞‡•Ä (7km ‡§§‡§ï)",
        "1. Food amount daalo\n2. GST + fee daalo\n3. Distance (7km tak)"
    )
    await update.message.reply_text(msg + "\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‚Çπ ‡§Æ‡•á‡§Ç amount ‡§≠‡•á‡§ú‡•á‡§Ç:", reply_markup=ReplyKeyboardRemove())
    return FOOD

async def get_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = int(update.message.text)
        if amount < 199:
            await update.message.reply_text("‚Çπ199 ‡§∏‡•á ‡§ï‡§Æ ‡§ï‡§æ order ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
            return FOOD
        context.user_data["food"] = amount
        await update.message.reply_text("‡§Ö‡§¨ Tax + GST + Fee ‡§ü‡•ã‡§ü‡§≤ ‚Çπ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç:")
        return TAX
    except:
        await update.message.reply_text("‡§∏‡§π‡•Ä ‚Çπ ‡§∞‡§æ‡§∂‡§ø ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        return FOOD

async def get_tax(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tax = int(update.message.text)
        context.user_data["tax"] = tax
        await update.message.reply_text("Delivery ‡§¶‡•Ç‡§∞‡•Ä (km) ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç (max 7km):")
        return DISTANCE
    except:
        await update.message.reply_text("‡§∏‡§π‡•Ä ‚Çπ ‡§∞‡§æ‡§∂‡§ø ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        return TAX

async def get_distance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        distance = float(update.message.text)
        if distance > 7:
            await update.message.reply_text("‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§∏‡§ø‡§∞‡•ç‡§´ 7km ‡§§‡§ï ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡•§")
            return DISTANCE
        food = context.user_data["food"]
        tax = context.user_data["tax"]

        if 199 <= food <= 248:
            discount, extra = 90, 15
        elif 249 <= food <= 298:
            discount, extra = 110, 0
        else:
            discount, extra = 125, 0

        total = food + tax + extra - discount
        context.user_data.update({
            "distance": distance,
            "discount": discount,
            "extra": extra,
            "total": total
        })

        await update.message.reply_text(
            f"""Order Summary:
Food: ‚Çπ{food}
Tax: ‚Çπ{tax}
Distance: {distance} km
Discount: ‚Çπ{discount}
Extra: ‚Çπ{extra}
Final Amount: ‚Çπ{total}

Order confirm karein? (yes/no)"""
        )
        return CONFIRM
    except:
        await update.message.reply_text("Distance km ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        return DISTANCE

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "yes" in update.message.text.lower():
        await update.message.reply_text("‡§Ö‡§¨ Swiggy ‡§µ‡§æ‡§≤‡§æ Address Link ‡§≠‡•á‡§ú‡•á‡§Ç:")
        return ADDRESS
    else:
        await update.message.reply_text("Order cancel ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§", reply_markup=main_keyboard())
        return ConversationHandler.END

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("‡§Ö‡§¨ Cart ‡§ï‡§æ Screenshot ‡§≠‡•á‡§ú‡•á‡§Ç:")
    return SCREENSHOT

async def get_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        context.user_data["screenshot"] = update.message.photo[-1].file_id
        order_id = str(uuid.uuid4())[:8].upper()
        context.user_data["order_id"] = order_id
        user = update.effective_user

        # Receipt to user
        await update.message.reply_text(
            f"""‚úÖ Order Confirmed!

üßæ Order ID: {order_id}
Final Amount: ‚Çπ{context.user_data['total']}
Thank you! Seller ko details bhej diya gaya hai.""",
            reply_markup=main_keyboard()
        )

        # Message to seller
        msg = (
            f"üõí New Order!\n"
            f"Order ID: {order_id}\n"
            f"üë§ User: @{user.username or 'N/A'}\n"
            f"ID: {user.id}\n\n"
            f"Food: ‚Çπ{context.user_data['food']}\n"
            f"Tax: ‚Çπ{context.user_data['tax']}\n"
            f"Distance: {context.user_data['distance']} km\n"
            f"Discount: ‚Çπ{context.user_data['discount']}\n"
            f"Extra: ‚Çπ{context.user_data['extra']}\n"
            f"Total: ‚Çπ{context.user_data['total']}\n"
            f"Address: {context.user_data['address']}"
        )
        await context.bot.send_photo(chat_id=SELLER_ID, photo=context.user_data["screenshot"], caption=msg)
        return ConversationHandler.END
    else:
        await update.message.reply_text("Screenshot ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        return SCREENSHOT

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^Order$"), handle_order)],
        states={
            FOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_food)],
            TAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tax)],
            DISTANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_distance)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            SCREENSHOT: [MessageHandler(filters.PHOTO, get_screenshot)],
        },
        fallbacks=[MessageHandler(filters.Regex("^Cancel$"), cancel)],
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("language", language))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("contact", contact))
    app.add_handler(CommandHandler("help", contact))  # help opens contact
    app.add_handler(CommandHandler("order", handle_order))

    app.run_polling()

if __name__ == "__main__":
    main()

  
